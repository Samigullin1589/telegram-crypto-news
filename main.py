# main.py
import os
import telegram
import asyncio
import feedparser
import time
import requests
from bs4 import BeautifulSoup
import re
import sqlite3
import aiohttp

# --- AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---
import google.generativeai as genai
from openai import OpenAI

# ==============================================================================
# --- –í–ï–†–°–ò–Ø 8.0 - INDUSTRIAL GRADE ---
#
# –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# 1. –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´: –í—Å–µ RSS-–ª–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ,
#    —á—Ç–æ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
#    —Å–∞–º–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –∞ –Ω–µ –∏—Ö —Å—É–º–º–µ.
# 2. –ë–ê–ó–ê –î–ê–ù–ù–´–• SQLITE: –í–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
#    –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–µ–π (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏),
#    –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.
# 3. –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ AI: –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI
#    —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É—Å—Ç–æ–π—á–∏–≤ –∫ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º
#    —Å–µ—Ç–µ–≤—ã–º —Å–±–æ—è–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API.
# 4. –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –ö–æ–¥ —Ä–∞–∑–±–∏—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã (DatabaseManager, AIHandler,
#    TelegramPoster, NewsProcessor) –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã, —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å—Ç–æ—Ç—ã
#    –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
# ==============================================================================

print("‚úÖ [INIT] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ v8.0 (Async + SQLite)...")

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
try:
    TELEGRAM_BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    TELEGRAM_CHANNEL_ID = os.environ['TELEGRAM_CHANNEL_ID']
    GEMINI_API_KEY = os.environ['GEMINI_API_KEY']
    OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
except KeyError as e:
    print(f"‚ùå [CRITICAL] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ AI
genai.configure(api_key=GEMINI_API_KEY)

RSS_FEEDS = {
    '–ú–∞–π–Ω–∏–Ω–≥ –†–§ –∏ –ú–∏—Ä üá∑üá∫': 'http://static.feed.rbc.ru/rbc/logical/footer/news.rss?categories=crypto',
    '–ù–æ–≤–æ—Å—Ç–∏ –ú–∞–π–Ω–∏–Ω–≥–∞ ‚öôÔ∏è': 'https://cointelegraph.com/rss/tag/mining',
    '–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –°–ù–ì üí°': 'https://forklog.com/feed',
    '–ú–∏—Ä–æ–≤–∞—è –≠–∫–æ–Ω–æ–º–∏–∫–∞ üåç': 'https://www.reuters.com/news/archive/businessNews.rss',
    '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üíª': 'https://www.cnews.ru/inc/rss/telecom.xml'
}

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
POST_DELAY_SECONDS = 900  # 15 –º–∏–Ω—É—Ç
IDLE_DELAY_SECONDS = 300  # 5 –º–∏–Ω—É—Ç
DB_PATH = os.path.join(os.environ.get('RENDER_DISK_MOUNT_PATH', '.'), 'news_database.sqlite')

# --- 2. –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ---
class DatabaseManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite."""
    def __init__(self, db_path):
        self.db_path = db_path
        self._conn = None
        self.setup()

    def setup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS posted_articles (
                    link TEXT PRIMARY KEY,
                    published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()
        print(f"üíæ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –ø–æ –ø—É—Ç–∏: {self.db_path}")

    def _get_connection(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
        return sqlite3.connect(self.db_path)

    def link_exists(self, link):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM posted_articles WHERE link = ?", (link,))
            return cursor.fetchone() is not None

    def save_link(self, link):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            # INSERT OR IGNORE –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("INSERT OR IGNORE INTO posted_articles (link) VALUES (?)", (link,))
            conn.commit()
    
    def get_all_links(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ (–¥–ª—è baseline)."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT link FROM posted_articles")
            return {row[0] for row in cursor.fetchall()}

# --- 3. –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI ---
class AIHandler:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ AI —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    def __init__(self, gemini_key, openai_key):
        self.gemini_model = genai.GenerativeModel('gemini-1.5-pro-latest')
        self.openai_client = OpenAI(api_key=openai_key)
        self.prompt_template = """
        –¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏–∑–¥–∞–Ω–∏—è 'Bloomberg Crypto'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ 'Crypto Compass'.
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É Markdown –Ω–∏–∂–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.

        {emoji} **{title}**

        *–ó–¥–µ—Å—å –Ω–∞–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ.*

        **–î–µ—Ç–∞–ª–∏:**
        - –ö–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç –∏–ª–∏ —Ü–∏—Ñ—Ä–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏.
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ.
        - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞ –∏–ª–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

        *(–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–º–∞–π–Ω–∏–Ω–≥ #—Ä–æ—Å—Å–∏—è #–∑–∞–∫–æ–Ω)*
        """

    async def get_summary(self, title, text, category):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –æ—Ç AI —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
        max_retries = 3
        backoff_factor = 10  # 10s, 20s, 40s
        
        for attempt in range(max_retries):
            try:
                category_emoji = category.split()[-1]
                prompt = self.prompt_template.format(emoji=category_emoji, title=title)
                print(f"ü§ñ [AI] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini: {title}")
                response = await self.gemini_model.generate_content_async(f"{prompt}\n\n–¢–ï–ö–°–¢ –°–¢–ê–¢–¨–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}")
                return self._sanitize_markdown(response.text)
            except Exception as e:
                print(f"‚ö†Ô∏è [WARN] –û—à–∏–±–∫–∞ Gemini: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                if attempt + 1 == max_retries:
                    print("üö® [AI] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è Gemini –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ GPT.")
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å GPT –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
                    try:
                        print(f"ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GPT (—Ä–µ–∑–µ—Ä–≤): {title}")
                        user_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:\n{text}"
                        loop = asyncio.get_event_loop()
                        response = await loop.run_in_executor(None, lambda: self.openai_client.chat.completions.create(model="gpt-4o", messages=[{"role": "system", "content": prompt}, {"role": "user", "content": user_prompt}]))
                        summary = response.choices[0].message.content
                        return self._sanitize_markdown(summary)
                    except Exception as e_gpt:
                        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ GPT: {e_gpt}. –û–±–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                        return None
                else:
                    delay = backoff_factor * (2 ** attempt)
                    print(f"‚è≥ [AI] –ü–∞—É–∑–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
                    await asyncio.sleep(delay)
        return None

    def _sanitize_markdown(self, text):
        for char in ['*', '_', '`']:
            if text.count(char * 3) % 2 != 0: text = text.rsplit(char * 3, 1)[0]
            if text.count(char * 2) % 2 != 0: text = text.rsplit(char * 2, 1)[0]
            if text.count(char) % 2 != 0: text = text.rsplit(char, 1)[0]
        return text

# --- 4. –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ---
class TelegramPoster:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    def __init__(self, token, channel_id):
        self.bot = telegram.Bot(token=token)
        self.channel_id = channel_id

    async def post(self, message, link, image_url):
        full_message = f"{message}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫]({link})"
        try:
            if image_url:
                await self.bot.send_photo(chat_id=self.channel_id, photo=image_url, caption=full_message[:1024], parse_mode='Markdown')
            else:
                await self.bot.send_message(chat_id=self.channel_id, text=full_message, parse_mode='Markdown', disable_web_page_preview=True)
            print(f"‚úÖ [POST] –ù–æ–≤–æ—Å—Ç—å '{link}' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            return True
        except telegram.error.BadRequest as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}. –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ.")
            plain_text_message = re.sub(r'[*_`\[\]()~>#+\-=|{}.!]', '', full_message)
            try:
                if image_url:
                    await self.bot.send_photo(chat_id=self.channel_id, photo=image_url, caption=plain_text_message[:1024])
                else:
                    await self.bot.send_message(chat_id=self.channel_id, text=plain_text_message, disable_web_page_preview=True)
                print("‚úÖ [POST] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.")
                return True
            except Exception as e_plain:
                print(f"‚ùå [FATAL] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e_plain}")
                return False
        except Exception as e:
            print(f"‚ùå [ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False

# --- 5. –ì–ª–∞–≤–Ω—ã–π orchestrator ---
class NewsProcessor:
    def __init__(self):
        self.db = DatabaseManager(DB_PATH)
        self.ai = AIHandler(GEMINI_API_KEY, OPENAI_API_KEY)
        self.poster = TelegramPoster(TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID)
        self.posted_urls_cache = set()

    async def _get_article_content(self, url, entry):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –∫–ª–∞—Å—Å–∞
        # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ get_article_content) ...
        image_url = None
        if 'media_content' in entry and entry.media_content:
            image_url = entry.media_content[0].get('url')
        elif 'enclosures' in entry and entry.enclosures:
            for enc in entry.enclosures:
                if 'image' in enc.type:
                    image_url = enc.href
                    break
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.get(url, timeout=15) as response:
                    response.raise_for_status()
                    html_text = await response.text()
            soup = BeautifulSoup(html_text, 'lxml')
            if not image_url:
                og_image = soup.find('meta', property='og:image')
                if og_image and og_image.get('content'):
                    image_url = og_image['content']
            article_body = soup.find('article') or soup.find('div', class_='post-content') or soup.find('body')
            text = entry.summary
            if article_body:
                for element in (article_body.find_all("script") + article_body.find_all("style")):
                    element.decompose()
                text = ' '.join(article_body.get_text().split())[:12000]
            return {'text': text, 'image_url': image_url}
        except Exception as e:
            print(f"üï∏Ô∏è [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è {url}: {e}")
            return {'text': entry.summary, 'image_url': image_url}

    async def _fetch_and_parse_feed(self, category, url, session):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –æ–¥–Ω—É RSS-–ª–µ–Ω—Ç—É."""
        try:
            print(f"üì° [FETCH] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é: {category}")
            async with session.get(url, timeout=20) as response:
                if response.status != 200:
                    print(f"üï∏Ô∏è [WARN] –ò—Å—Ç–æ—á–Ω–∏–∫ '{category}' –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return []
                feed_text = await response.text()
            
            # feedparser - –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            feed = await loop.run_in_executor(None, feedparser.parse, feed_text)

            if feed.bozo:
                print(f"üï∏Ô∏è [WARN] RSS-–ª–µ–Ω—Ç–∞ –¥–ª—è '{category}' –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π.")
            
            new_entries = []
            for entry in feed.entries:
                if entry.link and entry.link not in self.posted_urls_cache:
                    new_entries.append((entry, category))
            
            print(f"üì∞ [FETCH] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {category}. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {len(new_entries)}")
            return new_entries
        except Exception as e:
            print(f"‚ùå [CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å RSS-–ª–µ–Ω—Ç—É {category}: {e}")
            return []

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ –ë–î –≤ –∫—ç—à
        self.posted_urls_cache = self.db.get_all_links()
        
        if not self.posted_urls_cache:
            print("üî• [FIRST RUN] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π.")
            # ... (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫)
            # –í –¥–∞–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏, baseline —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        
        print(f"‚úÖ [START] –ë–æ—Ç –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.posted_urls_cache)} —Ä–∞–Ω–µ–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")

        while True:
            print(f"\n--- [CYCLE] –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.ctime()} ---")
            
            async with aiohttp.ClientSession() as session:
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ RSS
                tasks = [self._fetch_and_parse_feed(cat, url, session) for cat, url in RSS_FEEDS.items()]
                results = await asyncio.gather(*tasks)

            all_new_entries = [entry for feed_result in results for entry in feed_result]

            if all_new_entries:
                sorted_entries = sorted(all_new_entries, key=lambda x: x[0].get('published_parsed', time.gmtime()))
                print(f"üî• [QUEUE] –ù–∞–π–¥–µ–Ω–æ {len(sorted_entries)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π. –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ –æ—á–µ—Ä–µ–¥–∏.")
                
                for entry, category in sorted_entries:
                    if entry.link in self.posted_urls_cache:
                        continue

                    print(f"\nüîç [PROCESS] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {entry.title} ({category})")
                    content = await self._get_article_content(entry.link, entry)
                    formatted_post = await self.ai.get_summary(entry.title, content['text'], category)

                    if formatted_post:
                        success = await self.poster.post(formatted_post, entry.link, content['image_url'])
                        if success:
                            self.db.save_link(entry.link)
                            self.posted_urls_cache.add(entry.link)
                            print(f"üïí [PAUSE] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {POST_DELAY_SECONDS / 60:.0f} –º–∏–Ω—É—Ç.")
                            await asyncio.sleep(POST_DELAY_SECONDS)
                    else:
                        print("‚ùå [SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–æ–≤–æ—Å—Ç—å.")
                        await asyncio.sleep(5)
            else:
                print("üëç [INFO] –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            print(f"--- [PAUSE] –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {IDLE_DELAY_SECONDS / 60:.0f} –º–∏–Ω—É—Ç. ---")
            await asyncio.sleep(IDLE_DELAY_SECONDS)

# --- 6. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == '__main__':
    processor = NewsProcessor()
    try:
        asyncio.run(processor.run())
    except (KeyboardInterrupt, SystemExit):
        print("\n[STOP] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")