import os
import telegram
import asyncio
import feedparser
import time
import requests
from bs4 import BeautifulSoup

# --- AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---
import google.generativeai as genai
from openai import OpenAI

print("‚úÖ [INIT] –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ß–∏—Ç–∞–µ–º "—Å–µ–∫—Ä–µ—Ç—ã" –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
try:
    TELEGRAM_BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    TELEGRAM_CHANNEL_ID = os.environ['TELEGRAM_CHANNEL_ID']
    GEMINI_API_KEY = os.environ['GEMINI_API_KEY']
    OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
except KeyError as e:
    print(f"‚ùå [CRITICAL] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö AI
# Gemini (–æ—Å–Ω–æ–≤–Ω–æ–π)
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-pro-latest')
# OpenAI (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –°–ø–∏—Å–æ–∫ RSS-–ª–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
RSS_FEEDS = {
    '–ú–∞–π–Ω–∏–Ω–≥ –†–§ –∏ –ú–∏—Ä': 'https://bits.media/rss/',
    '–ù–æ–≤–æ—Å—Ç–∏ –ú–∞–π–Ω–∏–Ω–≥–∞': 'https://cointelegraph.com/rss/tag/mining',
    '–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –°–ù–ì': 'https://forklog.com/feed',
    '–ú–∏—Ä–æ–≤–∞—è –≠–∫–æ–Ω–æ–º–∏–∫–∞': 'https://feeds.reuters.com/reuters/businessNews'
}

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
POSTED_URLS_FILE = 'posted_urls.txt'

# --- 2. –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

def load_posted_urls():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ URL –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    try:
        with open(POSTED_URLS_FILE, 'r') as f:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            return set(line.strip() for line in f)
    except FileNotFoundError:
        print("‚ÑπÔ∏è [INFO] –§–∞–π–ª —Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        return set()

def save_posted_url(url):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π URL –≤ —Ñ–∞–π–ª, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏."""
    with open(POSTED_URLS_FILE, 'a') as f:
        f.write(url + '\n')

def get_full_article_text(url):
    """
    –ó–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç—å–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –µ—ë –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç.
    –≠—Ç–æ –¥–∞–µ—Ç AI –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS.
    """
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        
        soup = BeautifulSoup(response.text, 'lxml')
        
        # –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—å–∏ (—ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–π—Ç)
        article_body = soup.find('article') or soup.find('div', class_='post-content') or soup.find('body')
        
        if article_body:
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤, —Å—Ç–∏–ª–µ–π –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            for element in (article_body.find_all("script") + article_body.find_all("style")):
                element.decompose()
            text = ' '.join(article_body.get_text().split())
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ API
            return text[:8000] 
        return None
    except requests.RequestException as e:
        print(f"üï∏Ô∏è [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏: {e}")
        return None

# --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI ---

async def summarize_with_gemini(title, text, category):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é Gemini."""
    print(f"ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini: {title}")
    prompt = f"""
    –¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–µ–¥—É—â–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ 'Crypto Compass'.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ë–º–∫–∏–π –ø–æ—Å—Ç.
    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –Ω–∏–∂–µ. –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑.

    **{title}**

    *(–ó–¥–µ—Å—å —Å–∞–º–∞—è —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –±–µ–∑ –≤–æ–¥—ã.)*

    **–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã:**
    - –ì–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ.
    - –í—Ç–æ—Ä–∞—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å –∏–ª–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ.
    - –¢—Ä–µ—Ç–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ —Ü–∏—Ñ—Ä–∞.

    *(–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3-4 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–º–∞–π–Ω–∏–Ω–≥ #—Ä–æ—Å—Å–∏—è #–∑–∞–∫–æ–Ω)*
    """
    response = await gemini_model.generate_content_async(f"{prompt}\n\n–¢–ï–ö–°–¢ –°–¢–ê–¢–¨–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}")
    return response.text

async def summarize_with_gpt(title, text, category):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é GPT (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)."""
    print(f"ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GPT (—Ä–µ–∑–µ—Ä–≤): {title}")
    system_prompt = f"""–¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–µ–¥—É—â–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ 'Crypto Compass'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ë–º–∫–∏–π –ø–æ—Å—Ç. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –Ω–∏–∂–µ. –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑.

    **–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏**

    *–°—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.*

    **–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã:**
    - –ì–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥.
    - –í—Ç–æ—Ä–∞—è –¥–µ—Ç–∞–ª—å.
    - –¢—Ä–µ—Ç–∏–π —Ñ–∞–∫—Ç.

    #—Ö—ç—à—Ç–µ–≥1 #—Ö—ç—à—Ç–µ–≥2 #—Ö—ç—à—Ç–µ–≥3
    """
    user_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:\n{text}"
    
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(
        None,
        lambda: openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        )
    )
    return response.choices[0].message.content

async def get_ai_summary(title, text, category):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ü—Ä–æ–±—É–µ—Ç Gemini, –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ ‚Äî GPT."""
    try:
        return await summarize_with_gemini(title, text, category)
    except Exception as e:
        print(f"‚ö†Ô∏è [WARN] –û—à–∏–±–∫–∞ Gemini: {e}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ GPT...")
        try:
            return await summarize_with_gpt(title, text, category)
        except Exception as e_gpt:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ GPT: {e_gpt}. –û–±–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

# --- 4. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

async def send_message_to_channel(bot, message, link):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    full_message = f"{message}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫]({link})"
    try:
        await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=full_message, parse_mode='Markdown', disable_web_page_preview=True)
        print(f"‚úÖ [POST] –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ.")
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

async def main_loop():
    """–ì–ª–∞–≤–Ω—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
    posted_urls = load_posted_urls()
    print(f"‚úÖ [START] –ë–æ—Ç –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posted_urls)} —Ä–∞–Ω–µ–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
    
    while True:
        print(f"\n--- [CYCLE] –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.ctime()} ---")
        for category, url in RSS_FEEDS.items():
            print(f"üì∞ [FETCH] –ü—Ä–æ–≤–µ—Ä—è—é RSS-–ª–µ–Ω—Ç—É: {category}")
            feed = feedparser.parse(url)
            
            for entry in reversed(feed.entries):
                if entry.link not in posted_urls:
                    print(f"üîç [NEW] –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: {entry.title}")
                    
                    full_text = get_full_article_text(entry.link)
                    if not full_text:
                        print("üìù [SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS.")
                        full_text = entry.summary

                    formatted_post = await get_ai_summary(entry.title, full_text, category)

                    if formatted_post:
                        await send_message_to_channel(bot, formatted_post, entry.link)
                        posted_urls.add(entry.link)
                        save_posted_url(entry.link)
                    else:
                        print("‚ùå [SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å, –æ–±–∞ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏.")
                    
                    # –ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
                    await asyncio.sleep(10)

        print(f"--- [PAUSE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç. ---")
        await asyncio.sleep(1800)

if __name__ == '__main__':
    try:
        asyncio.run(main_loop())
    except (KeyboardInterrupt, SystemExit):
        print("\n[STOP] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")