# main.py v9.1
import os
import telegram
import asyncio
import feedparser
import time
from bs4 import BeautifulSoup
import re
import sqlite3
import aiohttp
from urllib.parse import urljoin
import io
from PIL import Image

# --- AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---
import google.generativeai as genai
from openai import OpenAI

# ==============================================================================
# --- –í–ï–†–°–ò–Ø 9.1 - GOLD STANDARD (FINAL OPTIMIZATIONS) ---
#
# –§–ò–ù–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# 1. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ï–†–í–û–ì–û –ó–ê–ü–£–°–ö–ê: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –¥–≤–æ–π–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ RSS-–ª–µ–Ω—Ç
#    –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ "–±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏". –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
# 2. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–ï–¢–ò: –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
#    –µ–¥–∏–Ω–æ–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü.
# 3. –ü–û–í–´–®–ï–ù–ò–ï –ù–ê–î–Å–ñ–ù–û–°–¢–ò: –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ
#    –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É RSS-–∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.
# ==============================================================================

print("‚úÖ [INIT] –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ v9.1 (Gold Standard)...")

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
try:
    TELEGRAM_BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    TELEGRAM_CHANNEL_ID = os.environ['TELEGRAM_CHANNEL_ID']
    GEMINI_API_KEY = os.environ['GEMINI_API_KEY']
    OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
except KeyError as e:
    print(f"‚ùå [CRITICAL] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()

genai.configure(api_key=GEMINI_API_KEY)

RSS_FEEDS = {
    '–ö—Ä–∏–ø—Ç–æ –∏ –ë–ª–æ–∫—á–µ–π–Ω –†–§/–°–ù–ì üá∑üá∫': 'https://habr.com/ru/rss/hubs/cryptocurrency/',
    '–ù–æ–≤–æ—Å—Ç–∏ –ú–∞–π–Ω–∏–Ω–≥–∞ (–ú–∏—Ä) ‚öôÔ∏è': 'https://cointelegraph.com/rss/tag/mining',
    '–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –°–ù–ì üí°': 'https://forklog.com/feed',
    '–ú–∏—Ä–æ–≤—ã–µ –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ üåç': 'https://www.coindesk.com/arc/outboundfeeds/rss/',
    '–ú–∞–π–Ω–∏–Ω–≥ –∏ –ñ–µ–ª–µ–∑–æ (–°–ù–ì) üíª': 'https://forklog.com/hub/mining/feed'
}

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
POST_DELAY_SECONDS = 900
IDLE_DELAY_SECONDS = 300
DB_PATH = os.path.join(os.environ.get('RENDER_DISK_MOUNT_PATH', '.'), 'news_database.sqlite')
MIN_IMAGE_WIDTH = 400
MIN_IMAGE_HEIGHT = 200

# --- 2. –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ---
class DatabaseManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.setup()

    def setup(self):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS posted_articles (
                    link TEXT PRIMARY KEY,
                    published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()
        print(f"üíæ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –ø–æ –ø—É—Ç–∏: {self.db_path}")

    def _get_connection(self):
        return sqlite3.connect(self.db_path)

    def save_link(self, link):
        with self._get_connection() as conn:
            conn.execute("INSERT OR IGNORE INTO posted_articles (link) VALUES (?)", (link,))
            conn.commit()

    def save_links_bulk(self, links):
        with self._get_connection() as conn:
            conn.executemany("INSERT OR IGNORE INTO posted_articles (link) VALUES (?)", [(link,) for link in links])
            conn.commit()

    def get_all_links(self):
        with self._get_connection() as conn:
            return {row[0] for row in conn.execute("SELECT link FROM posted_articles")}

# --- 3. –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI ---
class AIHandler:
    def __init__(self, gemini_key, openai_key):
        self.gemini_model = genai.GenerativeModel('gemini-1.5-pro-latest')
        self.openai_client = OpenAI(api_key=openai_key)
        self.prompt_template = """
        –¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏–∑–¥–∞–Ω–∏—è 'Bloomberg Crypto'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ 'Crypto Compass'.
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É Markdown –Ω–∏–∂–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.

        {emoji} **{title}**

        *–ó–¥–µ—Å—å –Ω–∞–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ.*

        **–î–µ—Ç–∞–ª–∏:**
        - –ö–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç –∏–ª–∏ —Ü–∏—Ñ—Ä–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏.
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ.
        - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞ –∏–ª–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

        *(–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–º–∞–π–Ω–∏–Ω–≥ #—Ä–æ—Å—Å–∏—è #–∑–∞–∫–æ–Ω)*
        """

    async def get_summary(self, title, text, category):
        max_retries = 3
        backoff_factor = 10
        category_emoji = category.split()[-1]
        
        if not text:
            print("‚ö†Ô∏è [AI] –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∞–º–º–∞—Ä–∏.")
            return None
        
        prompt = self.prompt_template.format(emoji=category_emoji, title=title)

        for attempt in range(max_retries):
            try:
                print(f"ü§ñ [AI] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini: {title}")
                response = await self.gemini_model.generate_content_async(f"{prompt}\n\n–¢–ï–ö–°–¢ –°–¢–ê–¢–¨–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}")
                return self._sanitize_markdown(response.text)
            except Exception as e:
                if "429" in str(e) or "quota" in str(e).lower():
                    print(f"üö® [AI] –ö–≤–æ—Ç–∞ Gemini –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ GPT.")
                    break
                
                print(f"‚ö†Ô∏è [WARN] –û—à–∏–±–∫–∞ Gemini: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                if attempt + 1 < max_retries:
                    delay = backoff_factor * (2 ** attempt)
                    print(f"‚è≥ [AI] –ü–∞—É–∑–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
                    await asyncio.sleep(delay)
        
        print("ü§ñ [AI] –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ GPT (—Ä–µ–∑–µ—Ä–≤).")
        try:
            user_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:\n{text}"
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, lambda: self.openai_client.chat.completions.create(model="gpt-4o", messages=[{"role": "system", "content": prompt}, {"role": "user", "content": user_prompt}]))
            summary = response.choices[0].message.content
            return self._sanitize_markdown(summary)
        except Exception as e_gpt:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ GPT: {e_gpt}. –û–±–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

    def _sanitize_markdown(self, text):
        for char in ['*', '_', '`']:
            if text.count(char * 3) % 2 != 0: text = text.rsplit(char * 3, 1)[0]
            if text.count(char * 2) % 2 != 0: text = text.rsplit(char * 2, 1)[0]
            if text.count(char) % 2 != 0: text = text.rsplit(char, 1)[0]
        return text

# --- 4. –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ---
class TelegramPoster:
    def __init__(self, token, channel_id):
        self.bot = telegram.Bot(token=token)
        self.channel_id = channel_id

    async def post(self, message, link, image_url):
        full_message = f"{message}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫]({link})"
        try:
            if image_url:
                await self.bot.send_photo(chat_id=self.channel_id, photo=image_url, caption=full_message[:1024], parse_mode='Markdown')
            else:
                await self.bot.send_message(chat_id=self.channel_id, text=full_message, parse_mode='Markdown', disable_web_page_preview=True)
            print(f"‚úÖ [POST] –ù–æ–≤–æ—Å—Ç—å '{link}' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            return True
        except telegram.error.BadRequest as e:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}. –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ.")
            plain_text_message = re.sub(r'[*_`\[\]()~>#+\-=|{}.!]', '', full_message)
            try:
                if image_url:
                    await self.bot.send_photo(chat_id=self.channel_id, photo=image_url, caption=plain_text_message[:1024])
                else:
                    await self.bot.send_message(chat_id=self.channel_id, text=plain_text_message, disable_web_page_preview=True)
                print("‚úÖ [POST] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.")
                return True
            except Exception as e_plain:
                print(f"‚ùå [FATAL] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e_plain}")
                return False
        except Exception as e:
            print(f"‚ùå [ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False

# --- 5. –ì–ª–∞–≤–Ω—ã–π orchestrator ---
class NewsProcessor:
    def __init__(self):
        self.db = DatabaseManager(DB_PATH)
        self.ai = AIHandler(GEMINI_API_KEY, OPENAI_API_KEY)
        self.poster = TelegramPoster(TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID)
        self.posted_urls_cache = set()

    def _is_likely_logo(self, image_url):
        if not image_url: return True
        return any(keyword in image_url.lower() for keyword in ['logo', 'brand', 'icon', 'sprite', 'avatar'])

    async def _get_valid_image_url(self, image_candidates, session):
        for url in image_candidates:
            if not url or self._is_likely_logo(url):
                continue
            
            try:
                async with session.get(url, timeout=10) as response:
                    if response.status != 200: continue
                    image_data = await response.content.read(4096)
                    if not image_data: continue

                    img = Image.open(io.BytesIO(image_data))
                    if img.width >= MIN_IMAGE_WIDTH and img.height >= MIN_IMAGE_HEIGHT:
                        print(f"üñºÔ∏è [IMG] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url} ({img.width}x{img.height})")
                        return url
                    else:
                        print(f"üñºÔ∏è [IMG] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ): {url} ({img.width}x{img.height})")
            except Exception as e:
                print(f"üñºÔ∏è [IMG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {url}: {e}")
                continue
        return None

    async def _get_article_content(self, url, entry, session):
        article_text = entry.get('summary', '')
        final_url = url
        image_candidates = []
        main_image_url = None
        try:
            async with session.get(url, timeout=15) as response:
                response.raise_for_status()
                final_url = str(response.url)
                html_text = await response.text()
            
            soup = BeautifulSoup(html_text, 'lxml')
            article_body = soup.find('article') or soup.find('div', class_='post-content') or soup.find('body')
            if article_body:
                for element in (article_body.find_all("script") + article_body.find_all("style")):
                    element.decompose()
                
                parsed_text = ' '.join(article_body.get_text().split())
                if parsed_text:
                    article_text = parsed_text[:12000]

                for img_tag in article_body.find_all('img', src=True):
                    if src := img_tag.get('src'):
                        image_candidates.append(urljoin(final_url, src))
            
            if 'media_content' in entry and entry.media_content:
                if media_url := entry.media_content[0].get('url'):
                    image_candidates.append(urljoin(final_url, media_url))
            elif 'enclosures' in entry and entry.enclosures:
                for enc in entry.enclosures:
                    if 'image' in enc.type and enc.href:
                        image_candidates.append(urljoin(final_url, enc.href))
            
            if og_image := soup.find('meta', property='og:image'):
                if content := og_image.get('content'):
                    image_candidates.append(urljoin(final_url, content))
            
            main_image_url = await self._get_valid_image_url(image_candidates, session)
            
            return {'text': article_text, 'image_url': main_image_url, 'final_url': final_url}
        except Exception as e:
            print(f"üï∏Ô∏è [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è {url}: {e}")
            return {'text': article_text, 'image_url': None, 'final_url': url}

    async def _fetch_feed_entries(self, session):
        tasks = [self._fetch_and_parse_feed(cat, url, session) for cat, url in RSS_FEEDS.items()]
        results = await asyncio.gather(*tasks)
        return [entry for feed_result in results for entry in feed_result]

    async def _fetch_and_parse_feed(self, category, url, session):
        try:
            print(f"üì° [FETCH] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é: {category}")
            async with session.get(url, timeout=20) as response:
                if response.status != 200:
                    print(f"üï∏Ô∏è [WARN] –ò—Å—Ç–æ—á–Ω–∏–∫ '{category}' –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return []
                feed_bytes = await response.read()
            
            loop = asyncio.get_event_loop()
            feed = await loop.run_in_executor(None, feedparser.parse, feed_bytes)
            
            if feed.bozo:
                print(f"üï∏Ô∏è [WARN] RSS-–ª–µ–Ω—Ç–∞ –¥–ª—è '{category}' –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π. –ü—Ä–∏—á–∏–Ω–∞: {feed.bozo_exception}")
            
            new_entries = [(entry, category) for entry in feed.entries if entry.get('link') and entry.get('link') not in self.posted_urls_cache]
            print(f"üì∞ [FETCH] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {category}. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {len(new_entries)}")
            return new_entries
        except Exception as e:
            print(f"‚ùå [CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å RSS-–ª–µ–Ω—Ç—É {category}: {e}")
            return []

    async def run(self):
        self.posted_urls_cache = self.db.get_all_links()
        all_new_entries = []
        
        if not self.posted_urls_cache:
            print("üî• [FIRST RUN] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–ø–æ–ª–Ω—è—é –µ–µ —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—å—è–º–∏...")
            async with aiohttp.ClientSession() as session:
                all_new_entries = await self._fetch_feed_entries(session)
            
            baseline_links = {entry[0].get('link') for entry in all_new_entries if entry[0].get('link')}
            if baseline_links:
                self.db.save_links_bulk(baseline_links)
                self.posted_urls_cache.update(baseline_links)
                print(f"‚úÖ [BASELINE] –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í –±–∞–∑—É –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(baseline_links)} —Å—Ç–∞—Ç–µ–π.")
        
        print(f"‚úÖ [START] –ë–æ—Ç –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.posted_urls_cache)} —Å—Å—ã–ª–æ–∫.")

        while True:
            if not all_new_entries:
                print(f"\n--- [CYCLE] –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.ctime()} ---")
                async with aiohttp.ClientSession() as session:
                    all_new_entries = await self._fetch_feed_entries(session)

            if all_new_entries:
                sorted_entries = sorted(all_new_entries, key=lambda x: x[0].get('published_parsed', time.gmtime()))
                print(f"üî• [QUEUE] –ù–∞–π–¥–µ–Ω–æ {len(sorted_entries)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π. –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ –æ—á–µ—Ä–µ–¥–∏.")
                
                async with aiohttp.ClientSession() as session:
                    for entry, category in sorted_entries:
                        link = entry.get('link')
                        title = entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')

                        if not link or link in self.posted_urls_cache:
                            continue

                        print(f"\nüîç [PROCESS] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {title} ({category})")
                        content = await self._get_article_content(link, entry, session)
                        
                        final_link = content.get('final_url', link)
                        formatted_post = await self.ai.get_summary(title, content['text'], category)

                        if formatted_post:
                            success = await self.poster.post(formatted_post, final_link, content['image_url'])
                            if success:
                                self.db.save_link(link)
                                self.posted_urls_cache.add(link)
                                print(f"üïí [PAUSE] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {POST_DELAY_SECONDS / 60:.0f} –º–∏–Ω—É—Ç.")
                                await asyncio.sleep(POST_DELAY_SECONDS)
                        else:
                            print("‚ùå [SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–æ–≤–æ—Å—Ç—å.")
                            await asyncio.sleep(5)
            else:
                print("üëç [INFO] –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            all_new_entries = []
            print(f"--- [PAUSE] –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {IDLE_DELAY_SECONDS / 60:.0f} –º–∏–Ω—É—Ç. ---")
            await asyncio.sleep(IDLE_DELAY_SECONDS)

# --- 6. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == '__main__':
    processor = NewsProcessor()
    try:
        asyncio.run(processor.run())
    except (KeyboardInterrupt, SystemExit):
        print("\n[STOP] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")