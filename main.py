import os
import telegram
import asyncio
import feedparser
import time
# --- –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import google.generativeai as genai
from openai import OpenAI

print("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# --- 1. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –î–í–£–• –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ---
try:
    TELEGRAM_BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    TELEGRAM_CHANNEL_ID = os.environ['TELEGRAM_CHANNEL_ID']
    GEMINI_API_KEY = os.environ['GEMINI_API_KEY']
    OPENAI_API_KEY = os.environ['OPENAI_API_KEY'] # <-- –ù–æ–≤—ã–π –∫–ª—é—á
except KeyError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {e}.")
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö API
# Gemini
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-pro-latest')
# OpenAI (GPT)
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# --- (–û—Å—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
RSS_FEEDS = {
    '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': 'https://cointelegraph.com/rss',
    '–≠–∫–æ–Ω–æ–º–∏–∫–∞': 'https://feeds.reuters.com/reuters/businessNews',
    'ForkLog': 'https://forklog.com/feed'
}
posted_urls = set()

# --- 2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ AI –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---

async def summarize_with_gemini(title, summary):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é Gemini."""
    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ Gemini: {title}")
    prompt = f"""–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç—å –∏ –≤–µ—Ä–Ω–∏ –∫—Ä–∞—Ç–∫—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã–∂–∏–º–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º–∞—Ç: **–ó–∞–≥–æ–ª–æ–≤–æ–∫**\n\n*–°—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏*.\n\n**–¢–µ–∑–∏—Å—ã:**\n- –¢–µ–∑–∏—Å 1\n- –¢–µ–∑–∏—Å 2\n\n#—Ö—ç—à—Ç–µ–≥1 #—Ö—ç—à—Ç–µ–≥2"""
    response = await gemini_model.generate_content_async(f"{prompt}\n\n–ù–æ–≤–æ—Å—Ç—å: {title} - {summary}")
    return response.text

async def summarize_with_gpt(title, summary):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é GPT (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)."""
    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ GPT: {title}")
    system_prompt = "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç—å –∏ –≤–µ—Ä–Ω–∏ –∫—Ä–∞—Ç–∫—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã–∂–∏–º–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º–∞—Ç: **–ó–∞–≥–æ–ª–æ–≤–æ–∫**\n\n*–°—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏*.\n\n**–¢–µ–∑–∏—Å—ã:**\n- –¢–µ–∑–∏—Å 1\n- –¢–µ–∑–∏—Å 2\n\n#—Ö—ç—à—Ç–µ–≥1 #—Ö—ç—à—Ç–µ–≥2"
    user_prompt = f"–ù–æ–≤–æ—Å—Ç—å: {title} - {summary}"
    
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(
        None,
        lambda: openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        )
    )
    return response.choices[0].message.content

async def summarize_universal(title, summary):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç Gemini, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî GPT."""
    try:
        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - Gemini
        return await summarize_with_gemini(title, summary)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {e}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ GPT...")
        try:
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è) - GPT
            return await summarize_with_gpt(title, summary)
        except Exception as e_gpt:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPT (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π AI —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª): {e_gpt}")
            return None

async def send_message_to_channel(bot, message, link):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)."""
    full_message = f"{message}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫]({link})"
    try:
        await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=full_message, parse_mode='Markdown', disable_web_page_preview=True)
        print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# --- 3. –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é) ---

async def main_loop():
    bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
    print("–ë–æ—Ç –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")
    while True:
        print(f"\n--- –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.ctime()} ---")
        for category, url in RSS_FEEDS.items():
            print(f"–ü—Ä–æ–≤–µ—Ä—è—é RSS-–ª–µ–Ω—Ç—É: {category}")
            feed = feedparser.parse(url)
            
            for entry in reversed(feed.entries):
                if entry.link not in posted_urls:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: {entry.title}")
                    
                    # ‚Üì ‚Üì ‚Üì –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ‚Üì ‚Üì ‚Üì
                    formatted_post = await summarize_universal(entry.title, entry.summary)

                    if formatted_post:
                        await send_message_to_channel(bot, formatted_post, entry.link)
                        posted_urls.add(entry.link)
                    else:
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å, –æ–±–∞ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏.")
                    
                    await asyncio.sleep(5) # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

        print("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ª–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç. ---")
        await asyncio.sleep(1800)

if __name__ == '__main__':
    try:
        asyncio.run(main_loop())
    except (KeyboardInterrupt, SystemExit):
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")