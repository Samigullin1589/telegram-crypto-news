import os
import telegram
import asyncio
import feedparser
import time
import requests
from bs4 import BeautifulSoup
import re

# --- AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---
import google.generativeai as genai
from openai import OpenAI

print("‚úÖ [INIT] –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ v5.2 (Priority Posting)...")

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
try:
    TELEGRAM_BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    TELEGRAM_CHANNEL_ID = os.environ['TELEGRAM_CHANNEL_ID']
    GEMINI_API_KEY = os.environ['GEMINI_API_KEY']
    OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
except KeyError as e:
    print(f"‚ùå [CRITICAL] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö AI
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-pro-latest')
openai_client = OpenAI(api_key=OPENAI_API_KEY)

RSS_FEEDS = {
    '–ú–∞–π–Ω–∏–Ω–≥ –†–§ –∏ –ú–∏—Ä üá∑üá∫': 'https://bits.media/rss/',
    '–ù–æ–≤–æ—Å—Ç–∏ –ú–∞–π–Ω–∏–Ω–≥–∞ ‚öôÔ∏è': 'https://cointelegraph.com/rss/tag/mining',
    '–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –°–ù–ì üí°': 'https://forklog.com/feed',
    '–ú–∏—Ä–æ–≤–∞—è –≠–∫–æ–Ω–æ–º–∏–∫–∞ üåç': 'https://feeds.reuters.com/reuters/businessNews'
}

DATA_DIR = os.environ.get('RENDER_DISK_MOUNT_PATH', '.')
POSTED_URLS_FILE = os.path.join(DATA_DIR, 'posted_urls.txt')
print(f"üíæ [INFO] –§–∞–π–ª –ø–∞–º—è—Ç–∏ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ –ø—É—Ç–∏: {POSTED_URLS_FILE}")


# --- 2. –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

def load_posted_urls():
    try:
        with open(POSTED_URLS_FILE, 'r') as f:
            return set(line.strip() for line in f)
    except FileNotFoundError:
        print("‚ÑπÔ∏è [INFO] –§–∞–π–ª —Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        return set()

def save_posted_url(url):
    with open(POSTED_URLS_FILE, 'a') as f:
        f.write(url + '\n')

def get_article_content(url, entry):
    image_url = None
    if 'media_content' in entry and entry.media_content:
        image_url = entry.media_content[0].get('url')
    elif 'enclosures' in entry and entry.enclosures:
        for enc in entry.enclosures:
            if 'image' in enc.type:
                image_url = enc.href
                break

    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'lxml')
        
        if not image_url:
            og_image = soup.find('meta', property='og:image')
            if og_image and og_image.get('content'):
                image_url = og_image['content']

        article_body = soup.find('article') or soup.find('div', class_='post-content') or soup.find('body')
        text = None
        if article_body:
            for element in (article_body.find_all("script") + article_body.find_all("style")):
                element.decompose()
            text = ' '.join(article_body.get_text().split())
            text = text[:8000] if len(text) > 200 else None
        
        return {'text': text, 'image_url': image_url}
        
    except requests.RequestException as e:
        print(f"üï∏Ô∏è [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")
        return {'text': None, 'image_url': image_url}

def sanitize_markdown(text):
    for char in ['*', '_', '`']:
        triple_char = char * 3
        if text.count(triple_char) % 2 != 0:
            text = text.rsplit(triple_char, 1)[0]
        double_char = char * 2
        if text.count(double_char) % 2 != 0:
            text = text.rsplit(double_char, 1)[0]
        if text.count(char) % 2 != 0:
            text = text.rsplit(char, 1)[0]
    return text


# --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI ---

async def get_ai_summary(title, text, category):
    category_emoji = category.split()[-1]
    prompt = f"""
    –¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏–∑–¥–∞–Ω–∏—è 'Bloomberg Crypto'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ 'Crypto Compass'.
    –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É Markdown –Ω–∏–∂–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.

    {category_emoji} **{title}**

    *–ó–¥–µ—Å—å –Ω–∞–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ.*

    **–î–µ—Ç–∞–ª–∏:**
    - –ö–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç –∏–ª–∏ —Ü–∏—Ñ—Ä–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏.
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ.
    - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞ –∏–ª–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

    *(–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–º–∞–π–Ω–∏–Ω–≥ #—Ä–æ—Å—Å–∏—è #–∑–∞–∫–æ–Ω)*
    """
    try:
        print(f"ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini: {title}")
        response = await gemini_model.generate_content_async(f"{prompt}\n\n–¢–ï–ö–°–¢ –°–¢–ê–¢–¨–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}")
        return sanitize_markdown(response.text)
    except Exception as e:
        print(f"‚ö†Ô∏è [WARN] –û—à–∏–±–∫–∞ Gemini: {e}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ GPT...")
        try:
            print(f"ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GPT (—Ä–µ–∑–µ—Ä–≤): {title}")
            user_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:\n{text}"
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, lambda: openai_client.chat.completions.create(model="gpt-4o", messages=[{"role": "system", "content": prompt}, {"role": "user", "content": user_prompt}]))
            summary = response.choices[0].message.content
            return sanitize_markdown(summary)
        except Exception as e_gpt:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ GPT: {e_gpt}. –û–±–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

# --- 4. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

async def send_message_to_channel(bot, message, link, image_url):
    full_message = f"{message}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫]({link})"
    try:
        if image_url:
            await bot.send_photo(chat_id=TELEGRAM_CHANNEL_ID, photo=image_url, caption=full_message[:1024], parse_mode='Markdown')
        else:
            await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=full_message, parse_mode='Markdown', disable_web_page_preview=True)
        print(f"‚úÖ [POST] –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        return True
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

async def main_loop():
    bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
    posted_urls = load_posted_urls()

    if not posted_urls:
        print("üî• [FIRST RUN] –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å.")
        for category, url in RSS_FEEDS.items():
            try:
                feed = feedparser.parse(url)
                for entry in feed.entries:
                    if entry.link not in posted_urls:
                        posted_urls.add(entry.link)
                        save_posted_url(entry.link)
            except Exception as e:
                print(f"üï∏Ô∏è [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å RSS-–ª–µ–Ω—Ç—É {url} –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"‚úÖ [BASELINE] –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(posted_urls)} —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π.")

    print(f"‚úÖ [START] –ë–æ—Ç –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posted_urls)} —Ä–∞–Ω–µ–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
    
    while True:
        print(f"\n--- [CYCLE] –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.ctime()} ---")
        all_new_entries = []
        for category, url in RSS_FEEDS.items():
            try:
                feed = feedparser.parse(url)
                new_count = 0
                for entry in feed.entries:
                    if entry.link not in posted_urls:
                        all_new_entries.append((entry, category))
                        new_count += 1
                print(f"üì∞ [FETCH] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {category}. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {new_count}")
            except Exception as e:
                print(f"üï∏Ô∏è [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RSS-–ª–µ–Ω—Ç—É {url}: {e}")

        if all_new_entries:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
            sorted_entries = sorted(all_new_entries, key=lambda x: x[0].get('published_parsed', time.gmtime()))
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê v5.2: –ü–£–ë–õ–ò–ö–£–ï–ú –°–ê–ú–£–Æ –°–í–ï–ñ–£–Æ –ò–ó –í–°–ï–• ---
            entry_to_post, category = sorted_entries[-1] # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é —Å–≤–µ–∂—É—é) –Ω–æ–≤–æ—Å—Ç—å
            
            print(f"üî• [SELECT] –ù–∞–π–¥–µ–Ω–æ {len(sorted_entries)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π. –í—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {entry_to_post.title}")
            
            content = get_article_content(entry_to_post.link, entry_to_post)
            full_text = content['text'] if content['text'] else entry_to_post.summary

            formatted_post = await get_ai_summary(entry_to_post.title, full_text, category)

            if formatted_post:
                success = await send_message_to_channel(bot, formatted_post, entry_to_post.link, content['image_url'])
                if success:
                    # –û—Ç–º–µ—á–∞–µ–º –¢–û–õ–¨–ö–û –û–î–ù–£ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é
                    posted_urls.add(entry_to_post.link)
                    save_posted_url(entry_to_post.link)
                    
                    print(f"üïí [PAUSE] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
                    await asyncio.sleep(900)
                else:
                    await asyncio.sleep(60) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            else:
                print("‚ùå [SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞.")
                await asyncio.sleep(60)
        else:
            print("üëç [INFO] –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ
            await asyncio.sleep(300) # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

if __name__ == '__main__':
    try:
        asyncio.run(main_loop())
    except (KeyboardInterrupt, SystemExit):
        print("\n[STOP] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")