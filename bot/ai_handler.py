# bot/ai_handler.py
import asyncio
import google.generativeai as genai
from openai import OpenAI
from . import config

class AIHandler:
    def __init__(self):
        genai.configure(api_key=config.GEMINI_API_KEY)
        self.gemini_model = genai.GenerativeModel('gemini-1.5-pro-latest')
        self.openai_client = OpenAI(api_key=config.OPENAI_API_KEY)
        self.prompt_template = """
        –¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏–∑–¥–∞–Ω–∏—è 'Bloomberg Crypto'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ 'Crypto Compass'.
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É Markdown –Ω–∏–∂–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.

        {emoji} **{title}**

        *–ó–¥–µ—Å—å –Ω–∞–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ.*

        **–î–µ—Ç–∞–ª–∏:**
        - –ö–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç –∏–ª–∏ —Ü–∏—Ñ—Ä–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏.
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ.
        - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞ –∏–ª–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

        *(–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–º–∞–π–Ω–∏–Ω–≥ #—Ä–æ—Å—Å–∏—è #–∑–∞–∫–æ–Ω)*
        """

    async def get_summary(self, title, text, category):
        max_retries, backoff_factor = 3, 10
        category_emoji = category.split()[-1]
        if not text:
            print("‚ö†Ô∏è [AI] –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∞–º–º–∞—Ä–∏.")
            return None
        prompt = self.prompt_template.format(emoji=category_emoji, title=title)
        for attempt in range(max_retries):
            try:
                print(f"ü§ñ [AI] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini: {title}")
                response = await self.gemini_model.generate_content_async(f"{prompt}\n\n–¢–ï–ö–°–¢ –°–¢–ê–¢–¨–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}")
                return self._sanitize_markdown(response.text)
            except Exception as e:
                if "429" in str(e) or "quota" in str(e).lower():
                    print("üö® [AI] –ö–≤–æ—Ç–∞ Gemini –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ GPT.")
                    break
                print(f"‚ö†Ô∏è [WARN] –û—à–∏–±–∫–∞ Gemini: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                if attempt + 1 < max_retries:
                    delay = backoff_factor * (2 ** attempt)
                    print(f"‚è≥ [AI] –ü–∞—É–∑–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
                    await asyncio.sleep(delay)
        print("ü§ñ [AI] –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ GPT (—Ä–µ–∑–µ—Ä–≤).")
        try:
            user_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:\n{text}"
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, lambda: self.openai_client.chat.completions.create(model="gpt-4o", messages=[{"role": "system", "content": prompt}, {"role": "user", "content": user_prompt}]))
            summary = response.choices[0].message.content
            return self._sanitize_markdown(summary)
        except Exception as e_gpt:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ GPT: {e_gpt}. –û–±–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

    def _sanitize_markdown(self, text):
        for char in ['*', '_', '`']:
            if text.count(char * 3) % 2 != 0: text = text.rsplit(char * 3, 1)[0]
            if text.count(char * 2) % 2 != 0: text = text.rsplit(char * 2, 1)[0]
            if text.count(char) % 2 != 0: text = text.rsplit(char, 1)[0]
        return text